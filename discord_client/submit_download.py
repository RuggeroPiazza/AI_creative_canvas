import discord
from discord.ext import commands
import requests
from PIL import Image
from pathlib import Path
import shutil
import time
import pyautogui as pg
import os

'''
The script connect the discord bot and automatically submit the prompt generated by previous scripts.
When a reply is generated (the image), the file format is checked. If recognised as image, the script will proceed 
to split the image in 4 and download them in a local folder.
'''

prompt = None

client = commands.Bot(command_prefix='*', intents=discord.Intents.all())

channel_id = int(os.getenv('channel_id'))


def split_image(image_file):
    with Image.open(image_file) as im:
        width, height = im.size
        mid_x = width // 2
        mid_y = height // 2
        top_left = im.crop((0, 0, mid_x, mid_y))
        top_right = im.crop((mid_x, 0, width, mid_y))
        bottom_left = im.crop((0, mid_y, mid_x, height))
        bottom_right = im.crop((mid_x, mid_y, width, height))

        return top_left, top_right, bottom_left, bottom_right


async def download_image(url, filename, to_split):
    response = requests.get(url)
    if response.status_code == 200:
        input_folder = Path("input")
        output_folder = Path("output")
        input_folder.mkdir(exist_ok=True)
        output_folder.mkdir(exist_ok=True)
        input_file = Path(input_folder, filename)
        with open(input_file, "wb") as f:
            f.write(response.content)
        print(f"Image downloaded: {filename}")
        if to_split:
            file_prefix = input_file.stem
            # Split the image
            top_left, top_right, bottom_left, bottom_right = split_image(input_file)
            # Save the output images with dynamic names in the output folder
            top_left.save(Path(output_folder, file_prefix + "_top_left.jpg"))
            top_right.save(Path(output_folder, file_prefix + "_top_right.jpg"))
            bottom_left.save(Path(output_folder, file_prefix + "_bottom_left.jpg"))
            bottom_right.save(Path(output_folder, file_prefix + "_bottom_right.jpg"))
        else:
            shutil.copy2(input_file, output_folder)
        input_file.unlink()
    else:
        print(response)


@client.event
async def on_ready():
    print("Bot connected")
    print(f'We have logged in as {client.user}')
    channel = client.get_channel(channel_id)
    time.sleep(3)
    await channel.send('Go!!')


@client.event
async def on_message(message):
    print(message.content)
    msg = message.content
    if msg == 'Go!!':
        time.sleep(3)
        pg.write('/imagine')
        time.sleep(3)
        pg.press('tab')
        pg.write(prompt)
        time.sleep(3)
        pg.press('enter')
        time.sleep(3)
        return

    to_quit = False
    for attachment in message.attachments:
        if attachment.filename.lower().endswith((".png", ".jpg", ".jpeg", ".gif", ".webp")):
            to_quit = True
            to_split = "Upscaled by" not in message.content
            await download_image(attachment.url, attachment.filename, to_split)
    if to_quit:
        quit(-1)
